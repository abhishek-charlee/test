name: Feature branch deployment Workflow

on:
  push:
    branches:
      - "feat/*"
      - "chore/*"
# on:
#   pull_request:
#     branches:
#       - feat/*
#       # - chore/*

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Extract Ticket ID
        id: extract-ticket-id
        run: |
          branch_name=$(echo $GITHUB_REF | sed 's|refs/heads/||')
          if [[ "$branch_name" =~ ^(feat/|chore/)(.*)$ ]]; then
            ticket_id="${BASH_REMATCH[2]}"
            echo "::set-output name=ticket_id::$ticket_id"
          else
            echo "No matching pattern found in the branch name."
          fi
      - name: Show Ticket ID
        run: |
          ticket_id=${{ steps.extract-ticket-id.outputs.ticket_id }}
          echo "Ticket ID: $ticket_id"

      - name: Set Up SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      # - name: SSH Into Dev Environment
      #   run: |
      #     ssh -J abhishek@34.138.106.113 -i ~/.ssh/id_rsa abhishek@10.0.1.6 -p 8463
      - name: ssh proxy command
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 10.0.1.6
          username: abhishek
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 8463
          proxy_host: 34.138.106.113
          proxy_username: abhishek
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_port: 22

      - name: Deploy to Project Directory
        run: |
          sudo su - test3
          cd UI
          ticket_id=${{ steps.extract-ticket-id.outputs.ticket_id }}
          echo "Ticket ID: $ticket_id"
          mkdir $ticket_id
          cd $ticket_id
          ls

      - name: Check for Available Ports
        run: |
          start_port=3000
          end_port=9000

          for ((port=start_port; port<=end_port; port++))
          do
            if ! lsof -i :$port &> /dev/null; then
              # Port is not in use, you can use it for your server
              echo "Port $port is available."
              export AVAILABLE_PORT=$port
              # You can assign $port to a variable for later use
              break  # Exit the loop after finding an available port
            fi
          done

      # - name: Start Server
      #   run: |
      #     cd your_project_directory
      #     ./start_server.sh $AVAILABLE_PORT
