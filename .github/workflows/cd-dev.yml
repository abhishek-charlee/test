name: Feature branch deployment Workflow

on:
  push:
    branches:
      - "feat/*/*"
      - "Feat/*/*"
      - "chore/*/*"
      - "Chore/*/*"
      - "qa/*/*"
      - "dev/*/*"
      - "qa-*"
      - "dev-*"
      - "Dev-*"
      - "QA-*"
      - "dev_*"
      - "qa_*"
      - "DEV_*"
      - "QA_*"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: test3
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Extract Ticket ID
        run: |
          branch_name="${GITHUB_REF##refs/heads/}"
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
          if [[ $branch_name =~ ([-_]?[0-9]+[-_]?[^0-9]*)$ ]]; then
            ticket_id="${BASH_REMATCH[1]}"
            echo "Ticket ID: $ticket_id"
            echo "TICKET_ID=$ticket_id" >> $GITHUB_ENV
          else
            echo "No valid ticket ID found in the branch name."
          fi

      - name: Display Ticket ID
        run: |
          echo "Ticket ID: $TICKET_ID"

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.TARGET_HOST }}
          username: ${{ secrets.TARGET_USERNAME }}
          key: ${{ secrets.TARGET_PRIVATE_KEY }}
          port: ${{ secrets.TARGET_PORT }}
          proxy_host: ${{ secrets.PROXY_HOST }}
          proxy_username: ${{ secrets.PROXY_USERNAME }}
          proxy_key: ${{ secrets.PROXY_PRIVATE_KEY }}
          proxy_port: ${{ secrets.PROXY_HOST_PORT }}
          script: |
            echo "$TICKET_ID"
            cd SS
            if [ -d ${{ env.TICKET_ID }} ]; then
                echo "Directory exists."
                cd ${{ env.TICKET_ID }}/icvs_priv
                git stash
                git pull
            else
                echo "Directory does not exist."
                mkdir ${{ env.TICKET_ID }}
                cd ${{ env.TICKET_ID }}
                git clone git@github.com:infinilytics/icvs_priv.git -b ${{ env.BRANCH_NAME }}
            fi


            # start_port=3000
            # end_port=9000

            # for ((port=start_port; port<=end_port; port++))
            # do
            #   if ! lsof -i :$port &> /dev/null; then
            #     echo "Port $port is available."
            #     export AVAILABLE_PORT=$port
            #     break  # Exit the loop after finding an available port
            #   fi
            # done

      # - name: Start Server
      #   run: |
      #     cd your_project_directory
      #     ./start_server.sh $AVAILABLE_PORT
